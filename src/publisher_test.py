import pandas as pd
import asyncio
import os
import random
from telegram import Bot
from src.config import BOT_TOKEN, CHANNEL_USERNAME, get_today_processed_csv
from src.llm_summary import summarize_description_llm

# ‚Äî‚Äî‚Äî –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî‚Äî‚Äî
def format_message(row: pd.Series, summary: dict) -> str:
    return f"""
üåê *–ì–æ—Ä–æ–¥:* {row.get('location', '---')}
üìÖ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {row.get('title', '---')}
üíº *–ö–æ–º–ø–∞–Ω–∏—è:* {row.get('company', '---')}
üí∞ *–ó–ü:* {row.get('salary_range') or row.get('salary') or '---'}

üïì *–û–ø—ã—Ç:* {row.get('experience', '---')}
üóÇ *–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:* {row.get('employment_type', '---')}
üìÜ *–ì—Ä–∞—Ñ–∏–∫:* {row.get('schedule', '---')}
‚è∞ *–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:* {row.get('working_hours', '---')}
üè† *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {row.get('work_format', '---')}
üìÖ *–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {row.get('published_date', '---')}

üßæ *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:*
{summary.get('responsibilities', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üéØ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
{summary.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üè¢ *–û –∫–æ–º–ø–∞–Ω–∏–∏:*
{summary.get('about_company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üëâ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ HH]({row['link']})
""".strip()

# ‚Äî‚Äî‚Äî –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CSV ‚Äî‚Äî‚Äî
def load_csv_safe(path: str) -> pd.DataFrame:
    if not os.path.exists(path):
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return pd.DataFrame()
    try:
        df = pd.read_csv(path)
        return df if not df.empty else pd.DataFrame()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return pd.DataFrame()

# ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ‚Äî‚Äî‚Äî
async def main():
    csv_path = get_today_processed_csv()
    df = load_csv_safe(csv_path)

    if df.empty:
        print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    bot = Bot(token=BOT_TOKEN)

    rows_to_send = df.sort_values("published_date_dt", ascending=False).head(5)

    for i, (_, row) in enumerate(rows_to_send.iterrows(), 1):
        summary = summarize_description_llm(row["description"])
        print("[DEBUG Summary]", summary)
        text = format_message(row, summary)
        await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, parse_mode="Markdown")
        print(f"‚úÖ [{i}/{len(rows_to_send)}] –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

        if i < len(rows_to_send):
            delay = random.uniform(3, 10)
            print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π: {delay:.2f} —Å–µ–∫.")
            await asyncio.sleep(delay)

    print(f"\nüì¨ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(rows_to_send)} –≤–∞–∫–∞–Ω—Å–∏–π.")

def run_publisher():
    return main()
