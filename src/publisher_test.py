# import pandas as pd
# import asyncio
# from telegram import Bot
# from src.config import BOT_TOKEN, CHANNEL_USERNAME, get_today_processed_csv

# def format_message(row):
#     return f"""üåê *–ì–æ—Ä–æ–¥:* {row.get('location', '---')}
# üìÖ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {row.get('title', '---')}
# üíº *–ö–æ–º–ø–∞–Ω–∏—è:* {row.get('company', '---')}
# üí∞ *–ó–ü:* {row.get('salary_range') or row.get('salary') or '---'}

# [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ HH]({row['link']})"""

# async def main():
#     csv_path = get_today_processed_csv()
#     df = pd.read_csv(csv_path)

#     # –ë–µ—Ä–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
#     rows_to_send = df.head(5)

#     if rows_to_send.empty:
#         print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
#         return

#     bot = Bot(token=BOT_TOKEN)
#     for _, row in rows_to_send.iterrows():
#         text = format_message(row)
#         await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, parse_mode="Markdown")

#     print(f"‚úÖ –¢–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(rows_to_send)} –≤–∞–∫–∞–Ω—Å–∏–π.")

# def run_publisher():
#     asyncio.run(main())

# if __name__ == "__main__":
#     run_publisher()


# import pandas as pd
# import asyncio
# from telegram import Bot
# from src.config import BOT_TOKEN, CHANNEL_USERNAME, get_today_processed_csv

# def format_message(row):
#     return f"""üåê *–ì–æ—Ä–æ–¥:* {row.get('location', '---')}
# üìÖ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {row.get('title', '---')}
# üíº *–ö–æ–º–ø–∞–Ω–∏—è:* {row.get('company', '---')}
# üí∞ *–ó–ü:* {row.get('salary_range') or row.get('salary') or '---'}

# üßæ *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:* {row.get('responsibilities', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
# üéØ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* {row.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
# üè¢ *–û –∫–æ–º–ø–∞–Ω–∏–∏:* {row.get('about_company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

# [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ HH]({row['link']})
# """

# async def main():
#     csv_path = get_today_processed_csv()
#     df = pd.read_csv(csv_path)

#     # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ ‚Äî —Ç–µ—Å—Ç
#     rows_to_send = df.head(5)

#     if rows_to_send.empty:
#         print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
#         return

#     bot = Bot(token=BOT_TOKEN)
#     for _, row in rows_to_send.iterrows():
#         text = format_message(row)
#         await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, parse_mode="Markdown")

#     print(f"‚úÖ –¢–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(rows_to_send)} –≤–∞–∫–∞–Ω—Å–∏–π.")

# def run_publisher():
#     asyncio.run(main())

# if __name__ == "__main__":
#     run_publisher()



import pandas as pd
import asyncio
import os
from telegram import Bot
from src.config import BOT_TOKEN, CHANNEL_USERNAME, get_today_processed_csv

def format_message(row):
    return f"""üåê *–ì–æ—Ä–æ–¥:* {row.get('location', '---')}
üìÖ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {row.get('title', '---')}
üíº *–ö–æ–º–ø–∞–Ω–∏—è:* {row.get('company', '---')}
üí∞ *–ó–ü:* {row.get('salary_range') or row.get('salary') or '---'}
üí∞ *–û–ø—ã—Ç:* {row.get('experience') or '---'}
üí∞ *–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:* {row.get('employment_type') or '---'}
üí∞ *–ì—Ä–∞—Ñ–∏–∫:* {row.get('schedule') or '---'}
üí∞ *–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:* {row.get('working_hours') or '---'}
üí∞ *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {row.get('work_format') or '---'}
üí∞ *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {row.get('published_date') or '---'}
üí∞ *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {row.get('skills') or '---'}

üßæ *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:* {row.get('responsibilities', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üéØ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* {row.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè¢ *–û –∫–æ–º–ø–∞–Ω–∏–∏:* {row.get('about_company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ HH]({row['link']})
"""

def load_csv_safe(path):
    if not os.path.exists(path):
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return pd.DataFrame()

    try:
        df = pd.read_csv(path)
        if df.empty:
            print(f"‚ùå CSV –ø—É—Å—Ç–æ–π: {path}")
        return df
    except pd.errors.EmptyDataError:
        print(f"‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω: {path}")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return pd.DataFrame()

async def main():
    csv_path = get_today_processed_csv()
    df = load_csv_safe(csv_path)

    if df.empty:
        print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    bot = Bot(token=BOT_TOKEN)
    for _, row in df.head(5).iterrows():
        text = format_message(row)
        await bot.send_message(chat_id=CHANNEL_USERNAME, text=text, parse_mode="Markdown")

    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(df.head(5))} –≤–∞–∫–∞–Ω—Å–∏–π.")

def run_publisher():
    return main()  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É (–ù–ï –≤—ã–∑—ã–≤–∞–µ–º asyncio.run!)
