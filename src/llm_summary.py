import os
import time
import json
import re
import requests
import logging

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
GEMINI_API_KEY = os.getenv("GEM_API_TOKEN")
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
HEADERS = {"Content-Type": "application/json"}

# === –í—ã–∑–æ–≤ Gemini API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ ===
def gemini_api_call(prompt: str, timeout: int = 30, retries: int = 3, delay: float = 2.0) -> str:
    if not GEMINI_API_KEY:
        logging.warning("[Gemini] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GEM_API_TOKEN")
        return ""

    for attempt in range(1, retries + 1):
        try:
            response = requests.post(
                f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
                headers=HEADERS,
                json={"contents": [{"parts": [{"text": prompt}]}]},
                timeout=timeout,
            )
            response.raise_for_status()
            return response.json()["candidates"][0]["content"]["parts"][0]["text"]
        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:
                logging.warning(f"[Gemini] 429 Too Many Requests ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}")
                time.sleep(delay * attempt)
                continue
            else:
                logging.warning(f"[Gemini] HTTP –æ—à–∏–±–∫–∞: {e}")
                break
        except Exception as e:
            logging.warning(f"[Gemini] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

    return ""

# === –ß–∏—Å—Ç–∫–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON Gemini –æ—Ç–≤–µ—Ç–∞ ===
def clean_gemini_response(raw: str) -> dict:
    try:
        cleaned = re.sub(r"^```(?:json)?|```$", "", raw.strip(), flags=re.IGNORECASE | re.MULTILINE).strip()
        cleaned = cleaned.replace('\u200b', '').replace('\ufeff', '')
        parsed = json.loads(cleaned)

        about_company = parsed.get("about_company", "").strip()
        responsibilities = parsed.get("responsibilities", "").strip()
        requirements = parsed.get("requirements", "").strip()

        return {
            "about_company": about_company if about_company else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": responsibilities if responsibilities else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": requirements if requirements else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }

    except Exception as e:
        logging.warning(f"[Gemini-summary] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }

# === –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ summary ===
SUMMARY_PROMPT_TEMPLATE = """
–†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Ç—Ä–∏ –∫—Ä–∞—Ç–∫–∏—Ö –±–ª–æ–∫–∞:

1. üìå *–û –∫–æ–º–ø–∞–Ω–∏–∏* ‚Äî –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
2. üßæ *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏* ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).
3. üéØ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è* ‚Äî —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è, –∫—Ä–∞—Ç–∫–æ (–¥–æ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).

üì¢ –ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (‚Ä¢), –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
üö´ –ï—Å–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –±–ª–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —É–∫–∞–∂–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ".
üîç –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ ‚Äî —Ä–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.

–í–µ—Ä–Ω–∏ —á–∏—Å—Ç—ã–π JSON:
```json
{
  "about_company": "...",
  "responsibilities": "...",
  "requirements": "..."
}
```

–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:
{description}
"""

# === –§–∏–Ω–∞–ª—å–Ω—ã–π summary –≤—ã–∑–æ–≤ ===
def summarize_description_llm(description: str) -> dict:
    try:
        prompt = SUMMARY_PROMPT_TEMPLATE.format(description=description)
    except Exception as e:
        logging.warning(f"[Gemini-summary] ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return {"about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

    raw = gemini_api_call(prompt)
    if not raw:
        logging.warning("[Gemini-summary] ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
        return {"about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

    logging.info("[Gemini-summary] –°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç:\n" + raw.strip())
    return clean_gemini_response(raw)

# === –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π ===
FILTER_PROMPT = """
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:
- Data Scientist
- Senior Data Scientist
- Junior Data Scientist
- Machine Learning Engineer
- ML Engineer
- Data Analyst
- Senior Data Analyst
- Data Engineer
- Big Data Engineer
- Data Architect
- Business Intelligence Analyst
- BI Analyst
- Business Intelligence Developer
- Statistician
- Quantitative Analyst
- NLP Engineer
- Computer Vision Engineer
- Deep Learning Engineer
- Artificial Intelligence Engineer
- AI Researcher
- Data Researcher
- Predictive Analytics Specialist
- Data Science Manager
- Analytics Consultant
- Data Miner
- Data Specialist
- Data Modeler

‚ùóÔ∏è–ò–≥–Ω–æ—Ä–∏—Ä—É–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "data", "AI", "model" –∏ —Ç.–ø., –Ω–æ –æ–Ω–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏–∑ —Å–ø–∏—Å–∫–∞.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: "{title}"
–û–ø–∏—Å–∞–Ω–∏–µ: "{description}"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: yes –∏–ª–∏ no.
"""

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ===
def filter_vacancy_llm(title: str, description: str) -> bool:
    try:
        prompt = FILTER_PROMPT.format(title=title, description=description)
    except Exception as e:
        logging.warning(f"[Gemini-filter] ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return False

    raw = gemini_api_call(prompt)
    if not raw:
        logging.warning("[Gemini-filter] ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
        return False

    logging.info("[Gemini-filter] –°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç:\n" + raw.strip())
    return raw.strip().lower() == "yes"
