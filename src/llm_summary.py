# ‚úÖ llm_summary.py (src/llm_summary.py)
import os
import requests

GEMINI_API_KEY = os.getenv("GEM_API_TOKEN")
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"

headers = {
    "Content-Type": "application/json"
}


def gemini_api_call(prompt: str) -> str:
    payload = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    response = requests.post(
        f"{GEMINI_API_URL}?key={GEMINI_API_KEY}", 
        headers=headers, 
        json=payload
    )
    response.raise_for_status()
    return response.json()['candidates'][0]['content']['parts'][0]['text']


# üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –≤–∞–∫–∞–Ω—Å–∏–π
FILTER_PROMPT_TEMPLATE = """
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –Ω–∞–∑–≤–∞–Ω–∏—é.

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π:
- Data Science
- Machine Learning
- Artificial Intelligence (AI)
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (Data Analytics)
- Business Intelligence (BI)
- DevOps

–ù–ï —É—á–∏—Ç—ã–≤–∞–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –≤—Ä–æ–¥–µ "data" –∏–ª–∏ "–º–æ–¥–µ–ª—å".

–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: "{title}"
–û–ø–∏—Å–∞–Ω–∏–µ: "{description}"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: yes –∏–ª–∏ no.
"""

def filter_vacancy_llm(title: str, description: str) -> bool:
    prompt = FILTER_PROMPT_TEMPLATE.format(title=title, description=description)
    try:
        result = gemini_api_call(prompt).lower()
        return "yes" in result
    except Exception as e:
        return False


# üìÑ –°–ê–ú–ú–ê–†–ò –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
SUMMARY_PROMPT_TEMPLATE = """
–†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Ç—Ä–∏ —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–∞:
1. –û –∫–æ–º–ø–∞–Ω–∏–∏
2. –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
3. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –±–ª–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞–ø–∏—à–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ". –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–ª—é—á–∞–º–∏:
"about_company", "responsibilities", "requirements".

–û–ø–∏—Å–∞–Ω–∏–µ:
{description}
"""


def summarize_description_llm(description: str) -> dict:
    prompt = SUMMARY_PROMPT_TEMPLATE.format(description=description)
    try:
        response = gemini_api_call(prompt)
        return eval(response) if response.strip().startswith("{") else {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }
    except:
        return {
            "about_company": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "responsibilities": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "requirements": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        }

