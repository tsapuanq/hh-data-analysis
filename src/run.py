# src/run.py

import asyncio
import pandas as pd
from src.parser import get_vacancy_links
from src.scraper import get_vacancy_details
from src.utils import setup_logger
from pathlib import Path

async def main():
    setup_logger()
    
    keyword = "Data Scientist"
    max_pages = 1  # –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∑–∂–µ
    
    print(f"üîé –°–æ–±–∏—Ä–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
    links = await get_vacancy_links(keyword, max_pages=max_pages)
    print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫")

    all_data = []
    for i, link in enumerate(links, 1):
        print(f"üìÑ [{i}/{len(links)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {link}")
        try:
            vacancy_data = await get_vacancy_details(link)
            all_data.append(vacancy_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}")

    if all_data:
        df = pd.DataFrame(all_data)
        Path("data").mkdir(parents=True, exist_ok=True)
        df.to_csv("data/raw/vacancies.csv", index=False, encoding='utf-8-sig')
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/raw/vacancies.csv")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())
